angular 
uses typescript
--
can make test cases


installation
--
install nodejs
minimum version for angular 6.9

# install npm

#install angular cli
npm install -g @angular/cli

# test installation 
ng --version

# create a project
ng new hello-world

# running
ng serve
- this listens on http://localhost:4200

Structure of angular application
Folders
e2e: end to end: end to end test: automated tests
node_modules: store third party libraries
src:
	actual srouce code of the application
src/app/app.module.ts
src/app/app.components.*

src/assets:
	store static assets

src/environments
	configuration settings for different environments

src/facicon.ico
src/index.html

src/main.ts
	starting point of the application
	bootstraps application module
src/pollyfills.ts
	fills the gaps between javascript and type script
src/styles.css
	global styles
src/test.ts
	setting up test environments

.angular-cli
	configuration for angular cli

.editorconfig
	make sure all team members use same editor settings
.gitignore

karma.conf.js
	configuration for karma test runner
package.json
	defines all dependencies
-------

Java brains
--
Angular technologies
angular CLi
reactive programming, RxJS, Observables, operators
Jasmine, Karma - testing
Redux, ngRx

----

Component based model
Header, sidebar, main body and footer can be components of a page

Each component can be individually knows about html and its JS

Every component assigned to a tag (selector) and renders by the consumer

Register each component in angular with a name

Each component can have another component (forms kind of component tree)

Every angular app will have Root component, which holds child components

-- 
setup

# nodejs
# runtime env 
ng install nodejs

# verify
node -v
# the above installs node package module as well
npm -v
# editor (visualstudio)

# install angular CLI
# kick starts angular project
npm install -g @angular/cli@6
- if @6 ignored, then latest available version will be installed
# verify
ng -v

# create simple application
ng new angular-sample
	installs npm dependencies
	includes angular libraries
	npm downloads and installs dependencies

# running
ng serve
- this listens on http://localhost:4200

---------------------------
index.html
- has "app-root" component, located at app/app-component*

view: html + css
model: ts
testcases: *.spec.ts

-- 
#create new component
ng generate component hello-world
- this updtes "app.module.ts" file too
- new component created as "app/hello-world" folder
- its identified by component name as "app-hello-world" as its defined in app/hello-world/hello-world.component.css, inside @Component as selector
- use this in index.html and add "<app-hello-world />". This would render the view of app-hello-world to index.html

# creating date component
ng generate component date

--

Creating typescript class
- implements a Class "OnInit"

Register as angular component
- @Component registers the class to angular

Component class implementation
--
#define a member variable
message : string = "hello";
- This can be included in the component view ("hello-world/hello-world.component.html" with "{{ message }}"")
- usage of {{}} this is known as data-binding (one way data-binding)

Databinding and Async
--
the data within the model (date.component.ts) can be updated dynamically. Eg: constructor can have a setInterval() to update its instance variables. If these are bound to UI, the value changes dynamically. 

Template Interpolation
--
double curly - string interpolation

{{}} -- the expression inside evaluates
{{ 10+10 }}

create a method called "add()" in component class ("date.component.ts") and invoke it from html as below:
{{ add(123, 456) }}

-----
ngFor

Declaring data in typescript class
// variable
user: any;

constructor() {
	this.user = {
		name: 'user name',
		title: 'another software developer',
		address: '123 Main St, State, 1002',
		phone: [
			'123-456-7890',
			'456-789-1230'
		]
	};
}

// how it works on view?
// 

<p *ngFor="let num of user.phone">{{num}}</p>

-----
ngIf

<div *ngIf="user.phone.length > 0">
	..
</div>

-----

Passing inputs to components
<app-date name="new name"></app-date>

// in component class -
@Input('name') userName: string; // now, access this as any member variable


// 
ngOnInit()

Lifecycle
--
constructor - object creation process
ngOnInit() // invokes after object created
ngOnChanges() // check angular api

-------
create angular modem (like pojo)

create "user.model.ts"

export class User {
	name: string;
	designation: string;
	address: string;
	phone: string[];
}


--

ngOnInit() {
	let obs = this.http.get('rest-end-point');
	obs.subscribe((response) => {
		console.log(response);
	});
}

--------------------------

styling

styles in css are applied to only the component's view pages; not to other components. 

how to do global styles?
add to the following
src/styles.css

---------------------------

invoke click method of the component by "(click)" as shown below
<button (click)="toggleButton()">{{buttonName}}</button>

toggleButton() should be defined in component class

---------------------------
Two way data binding

To use forms, need to import FormsModule in "app.module.ts"

Following sybtax binds the value in the text box to the component class variable; and at the same time, if anything changes on the inputText in the componet class, it reflects back in the view
<input type="text" [(ngModel)]="inputText"> // say inputText is component class variable
 
[] --> component to view
() --> view to component
tip: to remember: "banana in a box" [()]

---------------------------

Creating a module
ng generate module view-module

Creating component under a specific module (by default, it will create under app.module)
ng generate component view-module/view-component

Notice that the above does not update app.module.ts, but it updates view-module.module.ts

Export component (from the respective module* ts) and import module into other modules 

----------------------------

Creating a service
ng create service <component-name> // say service-sample here

This does not update app.module.ts or any other file. 

Add methods to this service class and can be used in other components. 

A service can be injected into component via constructor
constructor(svc: SampleServiceService) {} 
Note: the SampleServiceService has to be imported in the component

Also, the service class needs to annotated with @Injectable
This service needs to be defined under providers in "app.module.ts"

This is a dependency Injection

Any module can access service

Angular maintains common service space

Eventhough a service is available to all modules, its a good practise to define as "Provider" under that module, which its going to use. Other modules will be lazily loaded. 

-------------------

Http Client Service

---

Angular invoke REST 

import HttpClient module from @angular/common/http

ngOnInit() {
	let obs = this.http.get('rest-end-point');
	obs.subscribe(() => {
		console.log('Received the response');
	});
}

-------------------

Build and deploy angular application
(optiomization)

ng build
runs angular cli, then generates html/css and js into one folder
this is independent of nodejs and angular

// running ng build for proeuction mode
ng build --prod
// it will minify and AOT (ahead of time compilation)

--------------------

// following creates local http server
npm install http-server -g

// starts http server from a folder
http-server <root-folder-location>